//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.10.20 at 09:54:46 PM CEST 
//


package it.sbn.iccu.metaag1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for compressiontype.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="compressiontype">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Uncompressed"/>
 *     &lt;enumeration value="Linear PCM"/>
 *     &lt;enumeration value="MPEG-1 layer 1"/>
 *     &lt;enumeration value="MPEG-1 layer 2"/>
 *     &lt;enumeration value="MPEG-1 layer 3"/>
 *     &lt;enumeration value="AC3"/>
 *     &lt;enumeration value="Dolby"/>
 *     &lt;enumeration value="DTS"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "compressiontype")
@XmlEnum
public enum Compressiontype {

    @XmlEnumValue("Uncompressed")
    UNCOMPRESSED("Uncompressed"),
    @XmlEnumValue("Linear PCM")
    LINEAR_PCM("Linear PCM"),
    @XmlEnumValue("MPEG-1 layer 1")
    MPEG_1_LAYER_1("MPEG-1 layer 1"),
    @XmlEnumValue("MPEG-1 layer 2")
    MPEG_1_LAYER_2("MPEG-1 layer 2"),
    @XmlEnumValue("MPEG-1 layer 3")
    MPEG_1_LAYER_3("MPEG-1 layer 3"),
    @XmlEnumValue("AC3")
    AC_3("AC3"),
    @XmlEnumValue("Dolby")
    DOLBY("Dolby"),
    DTS("DTS");
    private final String value;

    Compressiontype(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static Compressiontype fromValue(String v) {
        for (Compressiontype c: Compressiontype.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
